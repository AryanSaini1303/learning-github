/*************************************GITHUB CHEATSHEET*********************************************************/
=>git log:prints the log of all past commits/changes in the repositry
=>git status:provides any pending commits or files which are not added
=>git init:initialises a local repositry
=>git add . *:adds all the files to staging area
=>git commit -m "message":commits the staged changes with message
=>git diff filename:shows the unstaged changes which we have done in the file
=>git checkout filename:"removes" the unstaged changes from working directory

=>first we initialise a repo locally in a working directory
=>then we stage all the changes to the file/add file to the staging area using git "add ."
=>then we use git commit -m "message" to commit all the files/changes to the local repositry
=>we can then create a remote repositry on the github and link the local repositry with remote repositry
=>use the command "git remote add origin https://github.com/AryanSaini1303/learning-github.git" to create a remote for the repositry, the link we used is the https link of the remote repositry
=>then use "git branch -M main" to select the main branch
=>then at last we use "git push -u origin main" to push the changes/files to the main branch in the remote repositry
=>we can have both local and remote repositry and we can push the files from local to remote repositry
=>our local repositry is in the .git file in the working directory which is hidden and the remote reposity is on the github
=>we can use create a ".gitignore" file and we can write the file name in the ".gitignore" file so that those files stay hidden in the remote repositry at the github
=>we can use "git clone https://github.com/AryanSaini1303/Portfolio.git" to clone a remote repositry to your local repositry, a new folder is created and all the files are stored in the that folder
=>now we can modify that local repositry and can also push it to the current remote repositry
=>we use "git branch brachname" to create a new branch in the local repositry
=>we use "git merge branchname" to merge the specified branch with the current branch, (after writing this command a text editor is opened to write a merge message if we want to and then just type "q!" and hit enter, the branches will be merged)
=>"git merge --abort" aborts a merging process
=>another person can search my repo and fork my repo on github, then he/she will have read-only access to my repo.
he/she can't directly change my file instead for the files to be changed they have to create a 
pull request after changing the files in the github text editor and i i.e. owner of the repositry will review the 
changes and approve it, after then i can merge the changes in the main repo if i like the changes and if no conflict
arises after merging.
